% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classify_variables.R
\name{classify_variables}
\alias{classify_variables}
\title{Classify variables by type}
\usage{
classify_variables(
  loaded_data,
  val_labels,
  no_val_labels = NULL,
  binary_labels = c(No = 0, Yes = 1),
  meta_vars = c("respid", "weight"),
  tibble_out = TRUE
)
}
\arguments{
\item{loaded_data}{A data frame or data.table containing the survey data}

\item{val_labels}{A data frame or data.table containing variable value labels with columns:
'var_name', 'val_label', and 'val_value'}

\item{no_val_labels}{Optional data frame or data.table containing variables that don't have value labels.
For these variables, their R class will determine their type classification.}

\item{binary_labels}{Named vector defining binary variable labels (default: c('No' = 0, 'Yes' = 1))}

\item{meta_vars}{Character vector of variable names to be classified as metadata (default: c('respid', 'weight'))}

\item{tibble_out}{Logical indicating whether to return a tibble (TRUE) or data.table (FALSE)}
}
\value{
A tibble or data.table with two columns:
\itemize{
\item var_name: Name of the variable
\item type: Classification type ('multi', 'single', 'meta', 'numeric', or 'character')
}
}
\description{
This function analyzes a dataset and its value labels to classify variables into different types:
\itemize{
\item 'multi': Binary variables with Yes/No or similar labels
\item 'single': Variables with multiple value labels
\item 'meta': Metadata variables like respondent IDs or weights
\item 'numeric': Variables with numeric values (when specified in no_val_labels)
\item 'character': Variables with character values (when specified in no_val_labels)
}

When variables are specified in no_val_labels, their type is determined by their R class:
numeric variables will be classified as 'numeric', and character variables as 'character'.
}
\examples{
# Using the test_list dataset
data(test_list)

# Classify variables with default settings
var_types <- classify_variables(
  loaded_data = test_list$loaded_data,
  val_labels = test_list$val_labels
)

# Classify variables with custom binary labels
custom_types <- classify_variables(
  loaded_data = test_list$loaded_data,
  val_labels = test_list$val_labels,
  binary_labels = c('Present' = 1, 'Not Present' = 0)
)

# Classify variables including numeric and character variables
all_types <- classify_variables(
  loaded_data = test_list$loaded_data,
  val_labels = test_list$val_labels,
  no_val_labels = data.frame(var_name = c('numvar_1', 'charvar_1'))
)

}
